buildscript {
    ext {
        springBootVersion = "1.4.2.RELEASE"
        springVersion = "4.3.4.RELEASE"
        springCloudVersion = "Camden.SR3"
        springCloudSsoVersion = "1.1.0.RELEASE"
        springCloudServicesVersion = "1.3.1.RELEASE"
        springSecurityVersion = "4.1.3.RELEASE"

        hibernateVersion = "5.0.11.Final"
        slf4jVersion = "1.7.21"
        junitVersion = "4.12"
        mysqlVersion = "5.1.40"
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "io.spring.gradle:dependency-management-plugin:0.6.1.RELEASE"
    }
}

task dependenciesGraphDot {

    mustRunAfter "clean"

    def graphBuildDir = "build/dependenciesGraph"
    def dotFile = file "$graphBuildDir/graph.dot"

    doLast {
        delete graphBuildDir
        mkdir graphBuildDir

        dotFile << "digraph dependencies {\n"

        project.subprojects.forEach { Project subProject ->
            try {

                Configuration compileConfig = subProject.configurations["compile"]

                compileConfig
                        .dependencies
                        .grep { it.respondsTo("getDependencyProject") }
                        .forEach { dotFile << """  "$subProject.name" -> "$it.dependencyProject.name"\n""" }
            } catch (UnknownConfigurationException ignored) {
            }
        }
        dotFile << "}\n"
    }
}
task dependenciesGraph(dependsOn: "dependenciesGraphDot", type: Exec) {
    workingDir "$project.buildDir/dependenciesGraph"
    commandLine "dot", "-O", "-Tpng", "graph.dot"
}
task clean(type: Delete) {
    delete "build"
}
defaultTasks "clean", "build", "dependenciesGraph"

def services = [
        [type: "p-mysql", plan: "100mb", instance: "movie-database"],
        [type: "p-mysql", plan: "100mb", instance: "album-database"],
        [type: "p-identity", plan: "p-identity", instance: "movie-fun-sso"],
        [type: "p-service-registry", plan: "standard", instance: "movie-fun-registry"],
]

task teardownPcfEnv {
    doLast {

        [
                "cf delete -f album-service",
                "cf delete -f movie-service",
                "cf delete -f movie-fun-app",
        ].each { println it.execute().text }

        services.each {
            println "cf delete -f $it.instance".execute().text
        }
    }
}

task setupPcfEnv {
    doLast {
        services.each {
            println "cf create-service $it.type $it.plan $it.instance".execute().text
        }
    }
}

task checkCfServices {
    doLast {
        def serviceNames = services.collect { it.instance }
        def counter = 0
        def allCreated = false
        def timeout = 274_000
        def waitTime = 5_000

        while (!allCreated) {
            if (counter > timeout) {
                throw new Exception("not all CF services have been created after ${timeout / 1000} seconds")
            }

            allCreated = serviceNames.inject(true) { memo, name ->
                def status = "cf service $name".execute().text
                def isCreated = status.contains("create succeeded")

                memo && isCreated
            }

            counter += waitTime
            sleep waitTime
        }
    }
}

task deploy {
    doLast {
        "cf push".execute().in.eachLine { line ->
            println line
        }
    }
}

setupPcfEnv.mustRunAfter teardownPcfEnv
checkCfServices.mustRunAfter setupPcfEnv
deploy.mustRunAfter checkCfServices

task resetPcfEnv(dependsOn: [teardownPcfEnv, setupPcfEnv, checkCfServices, deploy])